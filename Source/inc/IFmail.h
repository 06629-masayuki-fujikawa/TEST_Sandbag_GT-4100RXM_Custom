/*[]----------------------------------------------------------------------[]*/
/*|		New I/F(Master, Slave) common include							   |*/
/*|			・ここには、新I/F盤（親機と子機）が共通に使用する			   |*/
/*|			  メールデータフォーマットを定義します。					   |*/
/*[]----------------------------------------------------------------------[]*/
/*| Author      :  T.Hayase		                                           |*/
/*| Date        :  2005-01-18                                              |*/
/*| Update      :                                                          |*/
/*[]------------------------------------- Copyright(C) 2005 AMANO Corp.---[]*/
#ifndef _IF_MAIL_H_
#define _IF_MAIL_H_

#include	"IF.h"

/*----------------------------------*/
/*		area style define			*/
/*----------------------------------*/
/*
*	メールヘッダ（共通部）
*/
typedef struct {					/* 共通扱い。データ種別確定前に本共用体を扱うとき使用する */
	uchar	ucKind;					/*		データ種別 */
	uchar	ucOperation;			/*		処理区分（精算機からの要求に対するものなら「≠0」状態変化なら「＝0」）*/
	uchar	bUsedByQue;				/*		キュー使用中フラグ */
	uchar	ucTerminal;				/*		ターミナルNo.（どの子機か？を特定する。無視する電文もある）*/

	uchar	bHold;					/*		キュー保持中フラグ */
									/*		「通常状態データ時まとめ」機能がアダとなった障害対処のため追加する */
									/*		精算機へポーリングの応答として送信するも、*/
									/*		ACKが返されるまでキュー実体は「保持」しなければならない */
									/*		この保持中に「まとめ」が働かない様にするためのフラグ */
									/*		※障害時は、送信後ACKが返される前に「まとめ」が働き */
									/*		  ACKが返されたときキュー削除するため「まとめ」た変化データが捨てられてしまい */
									/*		  精算機へ届かなかった。ことによる */
									/*		・送信時に「1=保持中」とし・・・・・・・・PAYcom_SendNow(PAYnt_net.c) */
									/*		・キュー獲得時に「0=保持解除」とする・・・EnQueue(IFM.c) */
									/*		  ※念のためキュー削除時にも・・・・・・・DeQueue(IFM.c) */
} t_IF_Mail_Header;

typedef struct {					// 共通扱い。データ種別確定前に本共用体を扱うとき使用する
	uchar	ucKind;					// データ種別 
	uchar	bHold;					// データ保持フラグ
	uchar	t_no;					// ターミナルNo(本来のフォーマットの場合シーケンシャルNoであるが使用しないため)
} t_IF_Mail_Header2;

/************************************************************************************
*	新I/F盤（親機）
*	タスク間メールデータフォーマット
*
*	・対精算機通信タスク→[メール]→対子機通信タスク
*			★(23H)初期設定データ
*			★(52H:'R')状態要求データ（バージョン要求）
*
*	・対精算機通信タスク→[メール]→ロック管理タスク
*			★(21H)ロック装置制御データ
*
*	・ロック管理タスク→[メール]→対子機通信タスク
*			★(57H:'W')状態書き込みデータ
*
**************************************************************************************/

/************************************
*	対精算機通信タスク→[メール]→対子機通信タスク
*
*	状態要求データ（バージョン要求）
*	・データ種別（52H:'R'）
*************************************/
typedef struct {
t_IF_Mail_Header	sCommon;		/* データ種別＝52H:'R' を含む共通部 */

//データ種別による個別部
	uchar	ucRequest;				/* 要求内容		（'0'〜'F'）		*/
									/*	 	 '0'：子機状態データ要求	*/
									/*		 '1'：バージョン要求		*/
									/*	'2'〜'F'：予備					*/
} t_IF_R52_mail;


/************************************
*	対精算機通信タスク→[メール]→ロック管理タスク
*
*	ロック装置制御データ
*	・データ種別（21H）
*************************************/
typedef struct {
t_IF_Mail_Header2	sCommon;		// データ種別＝21H を含む共通部
//データ種別による個別部
	uchar	ucOperation;			/* 処理区分																	*/
									/*		 1 ロック装置閉（ロックする）										*/
									/*		 2 ロック装置開（ロック解除）										*/
									/*		 3 接続している全てのロック装置、およびセンサーの状態要求			*/
									/*		 4 指定したロック装置、およびセンサーの状態要求						*/
									/*		 5 接続ロック装置全て閉（ロックする）								*/
									/*		 6 接続ロック装置全て開（ロック解除）								*/
									/*		 7 メンテナンス情報要求												*/
									/*		 8 ロック装置開閉テスト要求（全て）									*/
									/*		 9 ロック装置開閉テスト要求（指定）									*/
									/*		10 動作カウンタークリア（全て）										*/
									/*		11 動作カウンタークリア（指定）										*/
									/*		12 バージョン要求							2005.04.08 早瀬・追加	*/
									/*		13 エラー状態要求							2005.04.08 早瀬・追加	*/
									/*																			*/
	uchar	ucLock;					/* ロック装置No.（予備含む）					（0〜89）	 				*/
									/*	注）処理区分が以下のとき有効											*/
									/*		 1 ロック装置閉（ロックする）										*/
									/*		 2 ロック装置開（ロック解除）										*/
									/*		 4 指定したロック装置、およびセンサーの状態要求						*/
									/*		 9 ロック装置開閉テスト要求（指定）									*/
									/*		11 動作カウンタークリア（指定）										*/
									/*																			*/
	ushort	usLockOnTime;			/* ロック装置閉時の信号出力時間					（1〜99 100ミリ秒単位）		*/
	ushort	usLockOffTime;			/* ロック装置開時の信号出力時間					（1〜99 100ミリ秒単位）		*/
} t_PAY_21_mail;

/************************************
*	☆メールで受け渡さない。
*	「ポーリング応答待ちリスト」(キュー)に溜まる
*	※対精算機通信タスクが「自分で」溜める
*
*	I/F盤要求データ
*	・データ種別（22H）
*************************************/
typedef struct {
t_IF_Mail_Header2	sCommon;		/* データ種別＝22H を含む共通部 */

//データ種別による個別部
	uchar	ucData;					/* 上位4ビット(0xf0)＝データ２、下位(0x0f)＝データ１に割り当てる */
} t_PAY_22_mail;

/************************************
*	☆メールで受け渡さない。
*	「ポーリング応答待ちリスト」(キュー)に溜まる
*	※ロック管理タスクが、溜める
*	※対精算機通信タスクが、溜まっているなら処理する
*
*	通常送信データ
*	・データ種別（61H）
*************************************/
typedef struct {
t_IF_Mail_Header2	sCommon;		// データ種別＝61H を含む共通部

//データ種別による個別部
	uchar		ucCount;			/* 状態データ数（MAX＝72）*/
	struct {
		uchar	ucLock;				/* ロック装置No.（予備含む）*/
		uchar	ucCarState;			/* 車両検知状態 */
									/*		0：接続無し										*/
									/*		1：車両有り										*/
									/*		2：車両なし										*/
									/*		3：手動モードで強制出庫							*/
		uchar	ucLockState;		/* ロック装置状態 */
									/*		1：ロック装置閉済み（正常）						*/
									/*		2：ロック装置開済み（正常）						*/
									/*		3：開動作異常（故障）							*/
									/*		4：閉動作異常（故障）							*/
									/*		5：故障解除										*/
									/*		6：指定ロック装置接続無し						*/
									/*		7：メンテナンスモード中（手動モード中）			*/
									/*		8：メンテナンスモード解除（自動モード中）		*/
	} sLock[IFM_ROOM_MAX_USED];		/*（[72]：複数ブロックにならないために・・・ */
} t_PAY_61_mail;

/************************************
*	☆メールで受け渡さない。
*	「ポーリング応答待ちリスト」(キュー)に溜まる
*	※ロック管理タスクが、溜める
*	※対精算機通信タスクが、溜まっているなら処理する
*
*	ロック装置開閉テスト応答（全ロック/指定ロック共通）
*	・データ種別（62H）
*************************************/
typedef struct {
t_IF_Mail_Header2	sCommon;		// データ種別＝62H を含む共通部
									/* データ種別による個別部なし */
									/*	※受け取り側で「ロック管理テーブル」を参照すれば、*/
									/*	  そこに必要とするデータがある。*/
	struct {
		uchar	ucResult;			// テスト結果
									//		00H：指定外
									//		01H：正常
									//		02H：NG
									//		03H：接続無し
	} sLock[IFM_ROOM_MAX];
} t_PAY_62_mail;

/************************************
*	☆メールで受け渡さない。
*	「ポーリング応答待ちリスト」(キュー)に溜まる
*	※ロック管理タスクが、溜める
*	※対精算機通信タスクが、溜まっているなら処理する
*
*	メンテナンス情報応答（＝稼動情報）
*	・データ種別（63H）
*************************************/
typedef struct {
t_IF_Mail_Header2	sCommon;		// データ種別＝63H を含む共通部
									/* データ種別による個別部なし */
									/*	※受け取り側で「ロック管理テーブル」を参照すれば、*/
									/*	  そこに必要とするデータがある。*/
	struct {						// ロック装置稼動データ
		uchar	ucAction[4];		//	・開閉動作の合計回数（自動・手動の合計、閉して開すると2回と数える）
		uchar	ucManual[4];		//	・I/F盤（親）ボタンSWによる手動（メンテナンスモード）での開・閉動作合計回数 
		uchar	ucTrouble[4];		//	・故障した合計回数（動作させたけど動作方向のセンサー状態が変化しない等）
	} sLock[IFM_ROOM_MAX_USED];		//（[72]）電文長短縮(複数ブロックにまたがらない)のための例外 
} t_PAY_63_mail;

/************************************
*	☆メールで受け渡さない。
*	「ポーリング応答待ちリスト」(キュー)に溜まる
*	※ロック管理タスクが、溜める
*	※対精算機通信タスクが、溜まっているなら処理する
*
*	バージョン要求応答
*	・データ種別（64H）
*************************************/
typedef struct {
t_IF_Mail_Header2	sCommon;		// データ種別＝64H を含む共通部
	struct {
		char	cViersion[8];		// I/F盤(子)のソフトウェアバージョン（部番）
	} sIFSlave[IF_SLAVE_MAX];		// 子No.13〜No.15は全て「00H」固定 
} t_PAY_64_mail;

/************************************
*	☆メールで受け渡さない。
*	「ポーリング応答待ちリスト」(キュー)に溜まる
*	※エラー検出タスクが、溜める
*	※対精算機通信タスクが、溜まっているなら処理する
*
*	エラー状態データ
*	・データ種別（65H）
*************************************/
typedef struct {
t_IF_Mail_Header2	sCommon;		// データ種別＝65H を含む共通部
									/* データ種別による個別部なし */
									/*	※受け取り側で「ロック管理テーブル」を参照すれば、*/
									/*	  そこに必要とするデータがある。*/
} t_PAY_65_mail;

/************************************
*	☆メールで受け渡さない。
*	「ポーリング応答待ちリスト」(キュー)に溜まる
*	※エラー検出タスクが、溜める
*	※対精算機通信タスクが、溜まっているなら処理する
*
*	エラーデータ
*	・データ種別（66H）
*************************************/
typedef struct {
t_IF_Mail_Header2	sCommon;		// データ種別＝66H を含む共通部

//データ種別による個別部
	uchar	ucErrTerminal;			/* 端末情報									*/
									/*	    0=親機								*/
									/*	1〜15=子機端末No.						*/

	uchar	ucErrCode;				/* エラーコード（親/子それぞれでユニーク）					*/
									/*	【親機】												*/
									/*		  1＝パリティエラー									*/
									/*		  2＝フレーミングエラー								*/
									/*		  3＝オーバーランエラー								*/
									/*		  4＝電文異常（ヘッダ文字）							*/
									/*		  5＝電文異常（データ長NG）							*/
									/*		  6＝電文異常（データIDNG）							*/
									/*		  7＝NACKリトライオーバー（ACK送信にてデータ破棄）	*/
									/*		  8＝送信リトライオーバー							*/
									/*		  9＝制御コードCRC異常								*/
									/*		 10＝電文異常（ヘッダ部未受信）						*/
									/*		 11＝プロトコル異常									*/
									/*		 12＝追い番重複										*/
									/*		 13＝受信制限時間超え								*/
									/*		 20＝キューバッファFULL（精算機ポーリング応答）		*/
									/*		 21＝キューバッファFULL（子機状態リスト）			*/
									/*		 22＝キューバッファFULL（ロック動作待ちリスト）		*/
									/*		 30＝初期設定データ異常								*/
									/*		 31＝制御データ異常									*/
									/*		 32＝動作指示異常									*/
									/*		 33＝モード切替異常									*/
									/*		 90＝パスワード破壊									*/
									/*	【子機】												*/
									/*		  1＝パリティエラー									*/
									/*		  2＝フレーミングエラー								*/
									/*		  3＝オーバーランエラー								*/
									/*		  4＝電文異常（ヘッダ文字）							*/
									/*		  5＝電文異常（データ長）							*/
									/*		  6＝電文異常（データID）							*/
									/*		  7＝NACKリトライオーバー（ACK送信にてデータ破棄）	*/
									/*		  8＝送信リトライオーバー							*/
									/*		  9＝CRC異常										*/
									/*		 10＝電文異常（ヘッダ部未受信）						*/
									/*		 11＝プロトコル異常									*/
									/*		 12＝応答相手違い									*/
									/*		 20＝キューバッファFULL								*/

	uchar	ucErrState;				/* エラー状態（発生/解除の状態）			*/
									/*		0：解除								*/
									/*		1：発生								*/
									/*		2：発生解除同時						*/
} t_PAY_66_mail;


/************************************
*	☆メールで受け渡さない。
*	「セレクティング待ちリスト」(キュー)に溜まる
*	※対子機通信タスクが、対精算機通信タスクから「t_PAY_23_mail」メールを受け、溜める
*				  または、子機から"設定データ要求あり"で「子機状態データ」を返されたとき、溜める
*	※対子機通信タスクが、溜まっているなら処理する
*
*	初期設定データ
*	・データ種別（49H：'I'）
*************************************/
typedef struct {
t_IF_Mail_Header	sCommon;		/* データ種別＝65H を含む共通部 */

//データ種別による個別部
	uchar	ucConnect[IFS_ROOM_MAX];/* ロック装置の接続（状態）													*/
									/* [0]ロック装置No.1														*/
									/* [6]ロック装置No.7（予備）												*/
									/* [7]ロック装置No.8（予備）												*/
									/*		0：接続無し															*/
									/*		1：接続有り（株式会社英田エンジニアリング製ロック装置（自転車））	*/
									/*		2：接続有り（株式会社英田エンジニアリング製ロック装置（バイク））	*/
									/*		3：接続有り（株式会社吉増製作所製ロック装置（自転車、バイク兼用））	*/
									/*		4：接続有り（コムズジャパン製ロック装置（自転車））					*/
									/*		5：接続有り（HID製ロック装置（自転車、バイク兼用））				*/
	ushort	usEntryTimer;			/* 入庫車両検知タイマー		 (車両検知確定時間  ＝10〜990 100ミリ秒単位)	*/
	ushort	usExitTimer;			/* 出庫車両検知タイマー		 (車両非検知確定時間＝10〜990 100ミリ秒単位)	*/
} t_IF_I49_mail;

/************************************
*	☆メールで受け渡さない。
*	「セレクティング待ちリスト」(キュー)に溜まる
*	※対子機通信タスクが、対精算機通信タスクから「t_PAY_23_mail」メールを受け、溜める
*				  または、子機から"設定データ要求あり"で「子機状態データ」を返されたとき、溜める
*	※対子機通信タスクが、溜まっているなら処理する
*
*	CRR初期設定データ
*	・データ種別（49H：'I'）
*************************************/
typedef struct {
t_IF_Mail_Header	sCommon;			/* データ種別＝49H を含む共通部 */
//データ種別による個別部
	uchar	ucConnect[IFS_CRRFLAP_MAX];	/* フラップ板No.毎、接続指定											*/
										/* 接点1〜15毎にターミナルNo.を割り付ける								*/
										/* ucConnect[3] = '05'と設定すると、接点4はターミナルNo.5 となる		*/
} t_Flap_I49_mail;
/************************************
*	CRR折り返しテスト結果
*	・データ種別（74H：'t'）
*************************************/
typedef struct {
t_IF_Mail_Header	sCommon;				/* データ種別＝74H を含む共通部 */

//データ種別による個別部
	uchar	ucTestResult[IFS_CRRFLAP_MAX];	/* 折り返しテスト結果 */
} t_IF_t74_mail;

/************************************
*	☆メールで受け渡さない。
*	「子機状態リスト」(キュー)に溜まる
*	※対子機通信タスクが、溜める
*	※ロック管理タスクが、溜まっているなら処理する
*
*	子機状態データ
*	・データ種別（41H:'A'）
*************************************/
typedef struct {
t_IF_Mail_Header	sCommon;		/* データ種別＝41H を含む共通部												*/

//データ種別による個別部
t_IF_LockSensor	unSensor[IFS_ROOM_MAX];	/* ロック装置センサー状態（バイナリ）										*/
										/*		bit0：ロック開センサー状態	0=OFF/1=ON（書き込み不可）				*/
										/*		bit1：ロック閉センサー状態	0=OFF/1=ON（書き込み不可）				*/
										/*		bit2：車両検知センサー状態	0=OFF/1=ON（書き込み不可）				*/
										/*		bit3：ロック装置動作状態	0=動作完結/1=動作中	(書き込み不可)	2005.03.04 早瀬・変更 */
										/*		bit4：ロック装置動作方向	0=閉動作方向/1=開動作方向				*/
										/*		bit5：予備					0=固定（書き込み不可）					*/
										/*		bit6：予備					0=固定（書き込み不可）					*/
										/*		bit7：メンテナンスモード	0=通常運用/1=メンテナンス			2005.03.30 早瀬・追加 */
} t_IF_A41_mail;

/************************************
*	☆メールで受け渡さない。
*	「子機状態リスト」(キュー)に溜まる
*	※対子機通信タスクが、溜める
*	※ロック管理タスクが、溜まっているなら処理する
*
*	子機バージョンデータ
*	・データ種別（56H：'V'）
*************************************/
typedef struct {
t_IF_Mail_Header	sCommon;		/* データ種別＝56H を含む共通部 */

//データ種別による個別部
	uchar	ucVersion[8];			/* バージョン番号（部番：ASCII）*/
} t_IF_V56_mail;

typedef struct {
t_IF_Mail_Header	sCommon;		/* データ種別＝57H を含む共通部												*/

//データ種別による個別部
	uchar	c_Reserved1[2];			// 予約 "00"固定
	uchar	c_Reserved2[2];			// 予約 "00"固定
	uchar	c_Reserved3[1];			// 予約 '0'固定
	uchar	c_Reserved4[1];			// 予約 '0'固定
	uchar	c_Command;				// 書き込みデータ	'1':ループ強制OFF
									//					'2':ループ強制ON
									//					'4':フラップ上昇
									//					'5':フラップ下降
} t_Flap_W57_mail;

typedef struct {
t_IF_Mail_Header	sCommon;		/* データ種別＝41H を含む共通部												*/

//データ種別による個別部
	t_IF_FlapSensor t_FlapSensor;	// フラップセンサ状態情報
} t_Flap_A41_mail;

typedef struct {
t_IF_Mail_Header	sCommon;		/* データ種別＝41H を含む共通部												*/

//データ種別による個別部
	t_IF_FlatLoopCounter t_LoopCounter;	// ループデータ
} t_Flap_S53_mail;

/*********************************************************
*	I/F盤（子機）
*	タスク間メールデータフォーマット
*
*	・対親機通信タスク→[メール]→ロック制御タスク
*			★(57H:'W')状態書き込みデータ
*
**********************************************************/
/************************************
*	対親機通信タスク→[メール]→ロック制御タスク
*
*	状態書込みデータ
*	・データ種別（57H：'W'）
*************************************/
typedef struct {
t_IF_Mail_Header	sCommon;		/* データ種別＝57H を含む共通部												*/

//データ種別による個別部
	ushort	usLockOffTime;			/* ロック装置開時の信号出力時間					（150〜14,850msec）			*/
	ushort	usLockOnTime;			/* ロック装置閉時の信号出力時間					（150〜14,850msec）			*/
	uchar	ucLock;					/* ロック装置No.（予備含む）					（0〜7）					*/
	uchar	ucMakerID;				/* ロック装置メーカーID（初期設定データの「ロック装置の接続」同様）		2005.03.30 早瀬・追加 */
t_IF_LockSensor	unCommand;			/* 書き込みセンサー状態（バイナリ）											*/
									/*		bit0：ロック開センサー状態	0=OFF/1=ON（書き込み不可）				*/
									/*		bit1：ロック閉センサー状態	0=OFF/1=ON（書き込み不可）				*/
									/*		bit2：車両検知センサー状態	0=OFF/1=ON（書き込み不可）				*/
									/*		bit3：ロック装置動作状態	0=動作完結/1=動作中	(書き込み不可)	2005.03.04 早瀬・変更 */
									/*		bit4：ロック装置動作方向	0=閉動作方向/1=開動作方向				*/
									/*		bit5：予備					0=固定（書き込み不可）					*/
									/*		bit6：予備					0=固定（書き込み不可）					*/
									/*		bit7：メンテナンスモード	0=通常運用/1=メンテナンス			2005.03.30 早瀬・追加 */
	uchar	ucOperation;			/* 処理区分（精算機からのどんな要求に起因しているか？）						*/
	BOOL	bWaitRetry;				/* リトライ待ちフラグ（この動作要求は、初回かリトライか）					*/
									/*		0：初回のロック装置制御で動作待ちしている							*/
									/*		1：ロック装置故障のための再送で動作待ちしている						*/
} t_IF_W57_mail;


/****************************/
/* 子機タスク間メール全体像	*/
/****************************/
typedef union {
t_IF_Mail_Header	sCommon;		/* 共通扱い。データ種別確定前に本共用体を扱うとき使用する */
									/* 対親機通信タスク→[メール]→ロック制御タスク */
	t_IF_W57_mail	sW57;			/*	(57H：'W')状態書込みデータ＝データ種別*/
} t_IFS_mail;

#endif	// _IF_MAIL_H_
